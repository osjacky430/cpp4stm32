import yaml
import re
import argparse


class ExtractClockData:
    def __init__(self, input_file: str, chip_name: str, output_file: str):
        self.input_file = input_file
        self.output_file = output_file
        self.chip_path = 'chip/' + chip_name + '.yaml'

    # pragma once

    # include "clock.hxx"
    # include "define/rcc.hxx"
    @staticmethod
    def __define_guard():
        return '#pragma once\n\n'

    @staticmethod
    def __include_header():
        return '#include \"clock.hxx\"\n\r' + '#include \"define/rcc.hxx\"\n\r'

    @staticmethod
    def __start_comment():
        return '\n//project variables generated by clock_generator.py\n\r'

    @staticmethod
    def __namespace_start():
        return 'namespace cpp_stm32 {\n\n\r'

    @staticmethod
    def __namespace_end():
        return '\n}   // namespace cpp_stm32\n\r'

    @staticmethod
    def __assign_clock_class_data(var_name: str, val: str):
        return var_name + ' = ' + val

    @staticmethod
    def __clock_member_var_name(clock: str, param: str):
        return param.lower() + clock.upper()

    @staticmethod
    def __variable_name(clock: str, param: str):
        return clock + '_' + param

    @staticmethod
    def __declare_variable(var_name: str, val: str, var_type='auto'):
        float_prefix = 'f' if var_type == 'float' else ''
        return 'constexpr ' + var_type + ' ' + var_name + ' = ' + val + float_prefix + ';\n'

    @staticmethod
    def __gen_variable(user_input, chip_valid_clock_yaml):
        chip_valid_clock = next(chip_valid_clock_yaml)
        ret_val = ''
        clock_data_class = '\nconstexpr auto CPP_STM32_CLOCK_DATA = []() {\n' \
                           '  clock::ClockFreq temp{};\n\n  '

        for clock_type in user_input:
            if clock_type in chip_valid_clock:
                variables = user_input[clock_type][0]
                clock_available_var = chip_valid_clock[clock_type][0]
                for key in variables.keys():
                    if key in clock_available_var:
                        var_type = clock_available_var[key][0]['type']
                        if var_type == 'bool' and type(variables[key]) is bool:
                            var_name = ExtractClockData.__variable_name(clock_type, key)
                            ret_val += ExtractClockData.__declare_variable(var_name, str(variables[key]).lower(),
                                                                           var_type)

                            class_member_name = ExtractClockData.__clock_member_var_name(clock_type, key)
                            class_member_init = ExtractClockData.__assign_clock_class_data(class_member_name, var_name)
                            clock_data_class += 'temp.' + class_member_init + ';\n  '
                        elif var_type == 'float' or var_type == 'std::uint32_t':

                            var_name = ExtractClockData.__variable_name(clock_type, key) \
                                if clock_type != 'VDD' else 'VDD'
                            ret_val += ExtractClockData.__declare_variable(var_name, str(variables[key]), var_type)

                            class_member_name = ExtractClockData.__clock_member_var_name(clock_type, key) \
                                if clock_type != 'VDD' else 'vdd'

                            class_member_init = ExtractClockData.__assign_clock_class_data(class_member_name, var_name)
                            clock_data_class += 'temp.' + class_member_init + ';\n  '
                        else:
                            var_options = clock_available_var[key][1]['option']
                            pattern = re.compile(variables[key], re.IGNORECASE)
                            res = pattern.search(var_options).group(0)
                            if res is not None:
                                var_name = ExtractClockData.__variable_name(clock_type, key)
                                ret_val += ExtractClockData.__declare_variable(var_name, var_type + '::' + res)

                                class_member_name = ExtractClockData.__clock_member_var_name(clock_type, key)
                                class_member_init = ExtractClockData.__assign_clock_class_data(class_member_name,
                                                                                               var_name)
                                clock_data_class += 'temp.' + class_member_init + ';\n  '
                            else:
                                print('error!!')    # todo raise exception
                    else:
                        raise KeyError()
            else:
                raise KeyError()

        clock_data_class += '\n  return temp;\n}();\n'
        return ret_val, clock_data_class

    def generate_clock_file(self):
        output = open(self.output_file, 'w')

        user_input_file = open(self.input_file)
        user_input = yaml.load(user_input_file, Loader=yaml.FullLoader)

        chip_file = open(self.chip_path)
        chip_clock_yml = yaml.load_all(chip_file, Loader=yaml.FullLoader)

        try:
            output.write(self.__define_guard())
            output.write(self.__include_header())
            output.write(self.__start_comment())
            output.write(self.__namespace_start())

            variables, clock_class = self.__gen_variable(user_input, chip_clock_yml)
            output.write(variables)
            output.write(clock_class)
            output.write(self.__namespace_end())
        except KeyError:
            # catch KeyError so that the file can be closed
            print('KEY ERROR!')
            pass

        chip_file.close()
        user_input_file.close()
        output.close()


arg_parser = argparse.ArgumentParser()
arg_parser.add_argument('clock_file', help='system clock yaml file')
arg_parser.add_argument('target', help='target micro-controller')
arg_parser.add_argument('output', help='output directory')

cmd_input = arg_parser.parse_args()

if __name__ == '__main__':
    extractor = ExtractClockData(cmd_input.clock_file, cmd_input.target.lower(), cmd_input.output)
    # extractor = ExtractClockData('../../src/sys_info.yaml', 'stm32l432kc', '../../build/project_config.hxx')
    # extractor = ExtractClockData('../../src/sys_info.yaml', 'stm32f446re', '../../build/project_config.hxx')
    extractor.generate_clock_file()
